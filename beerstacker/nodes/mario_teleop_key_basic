#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import Float32
import sys, select, termios, tty

MAX_LIN_VEL = 2.01
MAX_ANG_VEL = 13.18

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your Mario!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity
a/d : increase/decrease angular velocity

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input
    return input

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -MAX_LIN_VEL, MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -MAX_ANG_VEL, MAX_ANG_VEL)
    return vel

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('mario_teleop')
    pub1 = rospy.Publisher('/mario_controller/teleop_linear', Float32, queue_size=5)
    pub2 = rospy.Publisher('/mario_controller/teleop_angular', Float32, queue_size=5)
    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    print msg
    while not rospy.is_shutdown():
        key = getKey()
        if key == 'w' :
            target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif key == 'x' :
            target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif key == 'a' :
            target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif key == 'd' :
            target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
            status = status + 1
            print vels(target_linear_vel,target_angular_vel)
        elif key == ' ' or key == 's' :
            target_linear_vel   = 0.0
            target_angular_vel  = 0.0
            print vels(target_linear_vel, target_angular_vel)
        else:
            if (key == '\x03'):
                break
        if status == 20 :
            print msg
            status = 0
        pub1.publish(target_linear_vel)
        pub2.publish(target_angular_vel)

